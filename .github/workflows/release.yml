name: Release

on:
  push:
    branches: ['main']

jobs:
  preconditions:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check token
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}"]; then
            echo "Must provide a GITHUB_TOKEN secret in order to run release workflow"
            exit 1
          fi
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=REPO_NAME::$REPO_NAME"
          echo "::set-output name=ORG_NAME::$ORG_NAME"

  lint:
    name: Run lint
    runs-on: ubuntu-latest
    needs: [preconditions]
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-node@master
      with:
        node-version: 16.x
    - name: Cache Node.js modules
      uses: actions/cache@v1
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-
    - name: Install Packages
      run: npm ci
    - name: Lint
      run: npm run lint

  dependency-check:
    name: Run dependency check
    runs-on: ubuntu-latest
    needs: [preconditions]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: 16.x
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Dependency Check
        run: npm run depcheck

  integration:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - name: Install dependencies
        run: npm ci
      #- name: Setup dependencies
      #  run: docker-compose up -d
      - name: Sleep
        uses: kibertoad/wait-action@1.0.1
        with:
          time: '60s'
      - name: Run cypress integration tests
        uses: cypress-io/github-action@v4
        with:
          browser: chrome
          record: false
          headless: true
          build: npm run build
          start: npm start
          wait-on: 'http://localhost:3000'

  check-version:
    name: 'Check version'
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 --tags origin
      - name: Install yq
        run: sudo snap install yq
      - name: Check Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Skipping release as version has not increased
        if: steps.get_version.outputs.IS_NEW_VERSION != 'true'
        shell: bash
        run: |
          echo "Skipping release as current version has already been published"
  publish:
    name: 'Publish package'
    needs: [preconditions, dependency-check, integration, check-version, lint]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@v2
      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - name: Install dependencies
        run: npm ci
      - name: Build release
        run: |
          npm run build
          pushd ./build
          tar -czvf ../hii-client-build.tar.gz ./*
          popd

      # Build github release
      - name: Delete latest release
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: 'tags/latest' })
            }
            catch (err) {
              if (err.status !== 422) throw err
            }
      - name: Build release version
        uses: softprops/action-gh-release@v1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          tag_name: ${{ needs.check-version.outputs.version }}
          prerelease: false
          name: ${{ needs.check-version.outputs.version }}
          generate_release_notes: true
          files: hii-client-build.tar.gz
      - name: Build release latest
        uses: softprops/action-gh-release@v1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          tag_name: latest
          prerelease: false
          name: Latest ${{ needs.check-version.outputs.version }}
          generate_release_notes: true
          files: hii-client-build.tar.gz

  deploy-site:
    name: 'Deploy site'
    needs: [preconditions, dependency-check, integration, check-version, lint]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@v2
      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - name: Install dependencies
        run: npm ci
      - name: Build site
        run: npm run build
        env:
          MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
      - name: Deploy Site
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
