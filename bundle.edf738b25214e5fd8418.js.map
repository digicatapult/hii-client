{"version":3,"file":"bundle.edf738b25214e5fd8418.js","mappings":";;AAaA;AAGA;AAIA;;ACcA;AACA;AAgBA;;;;;;AC1CA;AAYA;AACA;;;;;;;;;;;;AAmBA;;;;;;;;;;;;AAYA;AASA;;;;;;;;;;;AC/CA;;;;;;;;;AC2CA;;;;;AAQA;;;;;;;AAOA;;;;AAOA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AAWA;;;;;;;;AAWA;ACnEA;AAIA;AACA;;;;;;;;AAUA;;;;;;;;;AAWA;;;;;AAQA;AACA;AAIA;;;AAGA;;AAIA;AAIA;;;AAGA;;;;;;;AAYA;;;;AAIA;AASA;;;AAIA;;;ACtHA;;;;AAMA;AAGA;;;;;;;;;AAWA;;AAIA;AAGA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AAGA;;;AAKA;;;;AAMA;;AAKA;AC5GA;AAGA;AAyKA","sources":["webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Grid/GridPanel.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Grid/Grid.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/AppBar/common.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/AppBar/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Search/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Drawer/Drawer.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/ListCard/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Map/index.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\n// TODO remove this, just to prove that ts extension works.\nconst Panel = ({\n  children,\n  ...props\n}) => {\n  return _jsx(Wrapper, {\n    ...props,\n    children: children\n  });\n};\nconst Wrapper = styled('div')`\n  grid-area: ${({\n  area\n}) => area};\n  ${({\n  justifySelf\n}) => justifySelf ? `justify-self: ${justifySelf}` : ''};\n`;\nexport default Panel;","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\nimport Panel from './GridPanel';\nconst Grid = Object.assign(propsWithC => {\n  const {\n    children,\n    ...props\n  } = propsWithC;\n  return _jsx(Wrapper, {\n    ...props,\n    children: children\n  });\n}, {\n  Panel\n});\nGrid.Panel = Panel;\nconst interpolateLayout = ({\n  areas,\n  rows,\n  columns,\n  gap,\n  alignItems\n}) => {\n  return `\n    grid-template-areas: ${areas.map(row => `\"${row.join(' ')}\"`).join('\\n')};\n    grid-template-rows: ${rows.join(' ')};\n    grid-template-columns: ${columns.join(' ')};\n    gap: ${gap || '0px'};\n    ${alignItems ? `align-items: ${alignItems};` : ''}\n\n  `;\n};\nconst Wrapper = styled('div')`\n  display: grid;\n  ${interpolateLayout}\n  ${({\n  byWidth\n}) => {\n  const entries = byWidth ? byWidth.map(({\n    minWidth,\n    ...props\n  }) => {\n    return `\n        @media (min-width: ${minWidth}px) {\n          ${interpolateLayout(props)}\n        }\n      `;\n  }) : [];\n  return entries.join('\\n');\n}}\n`;\nexport default Grid;","import styled from 'styled-components';\n// TODO props per dom element as well as all for appbar\n// TODO abstract into small component for reusing?\nconst Wrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  box-sizing: border-box;\n  transition: box-shadow 1s cubic-bezier(0.8, 1, 0.2, 1) 3s;\n  ${({\n  shadow,\n  width,\n  color,\n  theme\n}) => `\n    width: ${width || '100%'};\n    box-shadow: ${shadow || false ? '0px 3px 5px -2px rgb(0 0 0 / 20%), 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);' : 'none'};\n    background-color: ${color || theme?.primary || '#FFFE'};\n    color: ${theme?.accent || '#000'};\n  `}\n`;\nconst ToolBar = styled('ul')`\n  ${({\n  fixed,\n  direction\n}) => `\n    position: ${fixed ? 'fixed' : 'relative'};\n    flex-direction: ${direction || 'row'};\n  `}\n  padding: 0px 25px;\n  margin: 0;\n  list-style-type: none;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  height: 100%;\n  min-height: 74px;\n  gap: 10px;\n  padding-left: 54px;\n`;\nconst Link = styled('a')`\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: inherit;\n  font-family: Roboto;\n  font-weight: 700;\n  padding: 0 15px;\n  font-size: 1em;\n  line-height: 74px;\n\n  ${({\n  active,\n  theme\n}) => active ? `\n      margin-top: 4px;\n      background: linear-gradient(360deg, #DFE667 -408.97%, rgba(223, 230, 103, 0) 78.21%);\n      border-bottom: 4px solid ${theme?.accent || '#000'}\n    ` : ``}\n`;\nconst Li = styled('li')`\n  display: block;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n  transition: all 0.5s;\n\n  &:hover {\n    background-color: rgba(40, 30, 30, 0.1);\n  }\n`;\nexport { Li, ToolBar, Wrapper, Link };","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Li, Link, ToolBar, Wrapper } from './common';\nconst Item = ({\n  children,\n  ...props\n}) => _jsx(Li, {\n  children: _jsx(Link, {\n    href: \"#\",\n    ...props,\n    children: children\n  })\n});\n// TODO update to use grid comopnent\n// TODO move to separate components in case this could be reused\nconst AppBar = ({\n  children,\n  ...props\n}) => _jsx(Wrapper, {\n  ...props,\n  children: _jsx(ToolBar, {\n    children: React.Children.map(children, child => {\n      if (child.props) return React.cloneElement(child, props);\n    })?.filter(Boolean)\n  })\n});\nAppBar.Item = Item;\nexport default AppBar;","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nconst Search = ({\n  placeholder,\n  color = 'black',\n  background = 'transparent',\n  debounce = 250,\n  onSubmit\n}) => {\n  const [search, setSearch] = useState(null);\n  const [hasSubmitted, setHasSubmitted] = useState(true);\n  const buttonRef = useRef(null);\n  const handleSearchChange = useCallback(event => {\n    const target = event.target;\n    setSearch(target.value || null);\n    setHasSubmitted(false);\n  }, [setSearch, setHasSubmitted]);\n  const handleSubmit = useCallback(event => {\n    if (event !== null) {\n      event.preventDefault();\n      buttonRef.current?.blur();\n    }\n    if (!hasSubmitted) {\n      onSubmit(search);\n      setHasSubmitted(true);\n    }\n  }, [search, hasSubmitted, setHasSubmitted, onSubmit]);\n  useEffect(() => {\n    const timeoutHandler = setTimeout(() => {\n      handleSubmit(null);\n    }, debounce);\n    return () => clearTimeout(timeoutHandler);\n  }, [debounce, search, handleSubmit]);\n  return _jsxs(SearchWrapper, {\n    color: background,\n    onSubmit: handleSubmit,\n    children: [_jsx(SearchInput, {\n      placeholder: placeholder,\n      type: \"search\",\n      name: \"search\",\n      color: color,\n      onChange: handleSearchChange\n    }), _jsx(SearchIcon, {\n      color: color,\n      ref: buttonRef\n    })]\n  });\n};\nconst SearchWrapper = styled.form`\n  display: flex;\n  width: 100%;\n  min-width: 250px;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid black;\n  border-radius: 10px;\n  margin: 1em;\n  background: ${({\n  color\n}) => color};\n  > * {\n    margin: 0.5em;\n    padding: 0.5em;\n  }\n`;\nconst SearchInput = styled.input`\n  flex-grow: 1;\n  flex-shrink: 1;\n  border: 0;\n  font: inherit;\n\n  :focus {\n    box-shadow: inset 0 0 0 1px ${({\n  color\n}) => color};\n    border-radius: 7px;\n    outline: 0;\n  }\n`;\nconst SearchIcon = styled.button`\n  position: relative;\n  font: inherit;\n  flex-grow: 0;\n  flex-shrink: 0;\n  width: 2em;\n  height: 2em;\n  background: transparent;\n  border: 0;\n\n  &, ::before, ::after {\n    box-sizing: border-box;\n  }\n\n  :focus {\n    ::before, ::after {\n      box-shadow: 0 0 5px 1px ${({\n  color\n}) => color};\n    }\n    outline: 0;\n  }\n\n  ::before, ::after {\n    content: '';\n    display: block;\n    position: absolute;\n  }\n\n  ::before {\n    left: 0;\n    top: 0;\n    width: 80%;\n    height: 80%;\n    border: calc(4em / 16) solid ${({\n  color\n}) => color};\n    border-radius: 50%;\n  }\n\n  ::after {\n    right: 0;\n    bottom: 0;\n    height: calc(4em / 16);\n    width calc(1.41 * 100% - 1.41 * 40% - 40%);\n    background: ${({\n  color\n}) => color};\n    transform: rotateZ(40deg);\n    transform-origin: bottom right\n  }\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport default Search;","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport Grid from '../Grid';\nconst Drawer = ({\n  defaultIsOpen = false,\n  title = '',\n  width = '100%',\n  color = 'black',\n  background = 'transparent',\n  children\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultIsOpen);\n  const contentRef = useRef(null);\n  const clickHandler = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen, setIsOpen]);\n  const contentHeight = contentRef.current?.clientHeight || 1000;\n  return _jsxs(DrawerWrapper, {\n    width: width,\n    children: [_jsx(DrawerHeader, {\n      title: title,\n      color: color,\n      background: background,\n      isOpen: isOpen,\n      onClick: clickHandler\n    }), _jsx(DrawerContentOverflow, {\n      isOpen: isOpen,\n      maxHeight: contentHeight,\n      children: _jsx(DrawerContentWrapper, {\n        ref: contentRef,\n        children: children\n      })\n    })]\n  });\n};\nconst DrawerHeader = props => {\n  return _jsx(DrawerHeaderWrapper, {\n    ...props,\n    children: _jsxs(Grid, {\n      areas: [['icon', 'title', 'indicator']],\n      rows: ['auto'],\n      columns: ['auto', '1fr', 'auto'],\n      gap: \"1em\",\n      alignItems: \"center\",\n      children: [_jsx(Grid.Panel, {\n        area: \"icon\",\n        children: _jsx(DrawerHeaderIcon, {\n          color: props.color\n        })\n      }), _jsx(Grid.Panel, {\n        area: \"title\",\n        justifySelf: 'left',\n        children: _jsx(DrawerTitle, {\n          color: props.color,\n          children: props.title\n        })\n      }), _jsx(Grid.Panel, {\n        area: \"indicator\",\n        children: _jsx(DrawerIndicatorIcon, {\n          color: props.color,\n          isOpen: props.isOpen,\n          children: \"\\u25BC\"\n        })\n      })]\n    })\n  });\n};\nconst DrawerWrapper = styled.div`\n  width: ${({\n  width\n}) => width};\n`;\nconst DrawerHeaderIcon = styled.div`\n  background: ${({\n  color\n}) => color};\n  height: calc(1em / 16);\n  width: 1em;\n  margin: 0 calc(1em * 0.35 / 2);\n\n  ::before {\n    content: '';\n    display: block;\n    background: ${({\n  color\n}) => color};\n    height: calc(1em / 16);\n    width: 1em;\n    transform: translateY(calc(-4 * 1em / 16)) scaleX(1.35);\n  }\n\n  ::after {\n    content: '';\n    display: block;\n    background: ${({\n  color\n}) => color};\n    height: calc(1em / 16);\n    width: 1em;\n    transform: translateY(calc(3 * 1em / 16)) scaleX(0.51);\n  }\n`;\nconst DrawerTitle = styled.div`\n  color: ${({\n  color\n}) => color};\n`;\nconst DrawerIndicatorIcon = styled('div')`\n  margin: 0 0.5em;\n  font-size: 0.5em;\n  color: ${({\n  color\n}) => color};\n  transition: transform 0.5s ease;\n  transform: scaleX(2) ${({\n  isOpen\n}) => isOpen ? 'scaleY(-1)' : ''};\n`;\nconst DrawerHeaderWrapper = styled('button')`\n  width: 100%;\n  font: inherit;\n  background: ${({\n  background\n}) => background};\n  padding: 8px 16px;\n  border: 0;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\n// Overflow wrapper to ensure that when we hide the content the translated element\n// doesn't overflow and instead hides the content\nconst DrawerContentOverflow = styled.div`\n  overflow-y: hidden;\n  width: 100%;\n  transition: max-height 0.5s ease;\n  ${({\n  isOpen,\n  maxHeight\n}) => isOpen ? `\n    max-height: ${maxHeight}px;\n  ` : `\n    max-height: 0px;\n  `}\n`;\nconst DrawerContentWrapper = styled.div`\n  position: relative;\n  width: 100%;\n`;\nexport default Drawer;","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\nimport { useId } from 'react-id-generator';\nconst ListCard = ({\n  flashColor = '#e0e0e0',\n  background = '#f0f0f0',\n  title,\n  subtitle = '',\n  orientation = 'left',\n  width = '100%',\n  height = '100%',\n  onClick\n}) => {\n  const [id] = useId();\n  return _jsxs(Wrapper, {\n    orientation: orientation,\n    flashColor: flashColor,\n    background: background,\n    width: width,\n    height: height,\n    id: id,\n    onClick: () => onClick(title),\n    children: [_jsx(\"label\", {\n      htmlFor: id,\n      children: title\n    }), subtitle && _jsx(\"span\", {\n      children: subtitle\n    })]\n  });\n};\nconst Wrapper = styled.button`\n  border: 0;\n  font: inherit;\n  text-align: ${({\n  orientation\n}) => orientation};\n  cursor: pointer;\n\n  position: relative;\n  width: ${({\n  width\n}) => width};\n  height: ${({\n  height\n}) => height};\n  padding-left: calc(1em * 41 / (16 * 1.2));\n  overflow: hidden;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 0.5em;\n\n  background: ${({\n  background\n}) => background};\n\n  border-top-left-radius: ${({\n  orientation\n}) => orientation === 'left' ? '0.75em' : '0'};\n  border-top-right-radius: ${({\n  orientation\n}) => orientation === 'right' ? '0.75em' : '0'};\n  border-bottom-right-radius: ${({\n  orientation\n}) => orientation === 'right' ? '0.75em' : '0'};\n  border-bottom-left-radius: ${({\n  orientation\n}) => orientation === 'left' ? '0.75em' : '0'};\n\n  > * {\n    display: block;\n    padding: 0;\n    margin: 0;\n    width: 90%;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    cursor: pointer;\n  }\n\n  > label {\n    font-size: 1.2em;\n    font-weight: bolder;\n  }\n\n  > span {\n    font-size: 1em;\n  }\n\n  ::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: ${({\n  orientation\n}) => orientation === 'right' ? 'unset' : '0'};\n    right: ${({\n  orientation\n}) => orientation === 'left' ? 'unset' : '0'};\n\n    width: 1em;\n    background: ${({\n  flashColor\n}) => flashColor};\n  }\n\n  :focus-visible {\n    outline: 1px ${({\n  flashColor\n}) => flashColor} solid;\n  }\n`;\nexport default ListCard;","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport mapboxgl from 'mapbox-gl';\nimport colors from '../colors';\nconst Wrapper = styled('div')`\n  height: ${({\n  height\n}) => height};\n  width: ${({\n  width\n}) => width};\n`;\nconst applyLayerDefaults = props => {\n  return {\n    cluster: props.cluster || false,\n    clusterOptions: {\n      clusterMaxZoom: props.clusterOptions?.clusterMaxZoom || 14,\n      clusterAreaRadius: props.clusterOptions?.clusterAreaRadius || 50,\n      clusterColor: props.clusterOptions?.clusterColor || colors.black,\n      clusterRadius: props.clusterOptions?.clusterRadius || 20,\n      countFont: props.clusterOptions?.countFont || ['Open Sans Regular'],\n      countFontSize: props.clusterOptions?.countFontSize || 14,\n      countFontColor: props.clusterOptions?.countFontColor || colors.white\n    },\n    pointOptions: {\n      pointColor: props.pointOptions?.pointColor || colors.black,\n      pointRadius: props.pointOptions?.pointRadius || 6,\n      onPointClick: props.pointOptions?.onPointClick || Function(),\n      onClickZoomIn: props.pointOptions?.onClickZoomIn || 12\n    }\n  };\n};\nconst Map = props => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  const {\n    cluster,\n    clusterOptions: {\n      clusterMaxZoom,\n      clusterAreaRadius,\n      clusterColor,\n      clusterRadius,\n      countFont,\n      countFontSize,\n      countFontColor\n    },\n    pointOptions: {\n      pointColor,\n      pointRadius,\n      onPointClick,\n      onClickZoomIn\n    }\n  } = applyLayerDefaults(props);\n  const sourceJson = props.sourceJson;\n  const height = props.initialState?.height || '800px';\n  const width = props.initialState?.width || '800px';\n  mapboxgl.accessToken = props.token;\n  // initialize map\n  useEffect(() => {\n    if (mapRef.current) return undefined;\n    // defaults\n    const long = props.initialState?.long || -3.5;\n    const lat = props.initialState?.lat || 55;\n    const zoom = props.initialState?.zoom || 5;\n    const style = props.initialState?.style || 'mapbox://styles/mapbox/light-v11';\n    mapRef.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: style,\n      center: [long, lat],\n      zoom: zoom,\n      attributionControl: false,\n      testMode: true\n    });\n    // clean up\n    return () => {\n      mapRef?.current?.remove();\n      mapRef.current = null;\n    };\n  }, [props.initialState?.style, props.initialState?.long, props.initialState?.lat, props.initialState?.zoom,\n  // height/width changes require map reload\n  props.initialState?.height, props.initialState?.width]);\n  // update map geojson without map reload\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map || !sourceJson) return undefined;\n    const geojsonSource = map.getSource('source');\n    geojsonSource?.setData(sourceJson);\n  }, [sourceJson]);\n  // add layers after map load\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return undefined;\n    map.on('load', () => {\n      map.addSource('source', {\n        type: 'geojson',\n        data: sourceJson,\n        cluster: cluster,\n        clusterMaxZoom: clusterMaxZoom,\n        clusterRadius: clusterAreaRadius // Radius of each cluster when clustering points\n      });\n\n      map.addLayer({\n        id: 'clusters',\n        type: 'circle',\n        source: 'source',\n        filter: ['has', 'point_count'],\n        paint: {\n          'circle-color': clusterColor,\n          'circle-radius': clusterRadius\n        }\n      });\n      map.addLayer({\n        id: 'cluster-count',\n        type: 'symbol',\n        source: 'source',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': ['get', 'point_count_abbreviated'],\n          'text-font': countFont,\n          'text-size': countFontSize\n        },\n        paint: {\n          'text-color': countFontColor\n        }\n      });\n      map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'source',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': pointColor,\n          'circle-radius': pointRadius\n        }\n      });\n      // inspect a cluster on click\n      map.on('click', 'clusters', e => {\n        const features = map.queryRenderedFeatures(e.point, {\n          layers: ['clusters']\n        });\n        const clusterId = features[0]?.properties?.cluster_id;\n        const source = map.getSource('source');\n        source.getClusterExpansionZoom(clusterId, (err, zoom) => {\n          if (err) return;\n          if (features[0].geometry.type === 'Point') {\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom\n            });\n          }\n        });\n      });\n      map.on('click', 'unclustered-point', e => {\n        const features = map.queryRenderedFeatures(e.point);\n        if (features[0].geometry.type === 'Point') {\n          onPointClick(features[0]);\n          // center on point, zoom in if current zoom is less than onClickZoomIn\n          map.easeTo({\n            center: features[0].geometry.coordinates,\n            zoom: Math.max(map.getZoom(), onClickZoomIn)\n          });\n        }\n      });\n      map.on('mouseenter', 'clusters', () => {\n        map.getCanvas().style.cursor = 'pointer';\n      });\n      map.on('mouseleave', 'clusters', () => {\n        map.getCanvas().style.cursor = '';\n      });\n    });\n  });\n  return _jsx(Wrapper, {\n    ref: mapContainer,\n    height: height,\n    width: width\n  });\n};\nexport default Map;"],"names":[],"sourceRoot":""}