{"version":3,"file":"bundle.5df068f704927ca80e1f.js","mappings":";;AAOA;AACA;AAEA;;ACYA;AACA;AAaA;AC5BA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;;;;;;ACjBA;AASA;AACA;;;;;;;;;;;;AAgBA;;;;;;;;;;;;AAYA;AAQA;;;;;;;;;;;ACjDA;;;;;;;;;ACoCA;;;;;AAMA;;;;;;;AAOA;;;;AAKA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASA;;;;;;;;AASA;AC7FA;AAEA;AACA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;AAMA;AACA;AAEA;;;AAGA;;AAEA;AAEA;;;AAGA;;;;;;;AAUA;;;;AAIA;;;;;;;;;;AAmBA;;;AAIA;;;;;ACjFA;AACA;;AAGA;;;AAGA;AAIA;;;;AAKA;;;AAGA;;;;;;;;;AAUA;;;;AAKA;;;ACnCA;;;;AAIA;AACA;;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;;;AAGA;;;;AAIA;;AAGA;ACpDA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;;;;AAIA;;AAGA;ACjCA;AACA;;;AAGA;AACA;;AAEA;AACA;AAEA","sources":["webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Grid/GridPanel.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Grid/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Heading/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/AppBar/common.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/AppBar/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Search/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Drawer/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/Dropdown/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/ListCard/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/HelpContainer/index.js","webpack://@digicatapult/hii-client/./node_modules/@digicatapult/ui-component-library/lib/ToggleButton/index.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\n// TODO remove this, just to prove that ts extension works.\nconst Panel = ({ children, ...props }) => {\n    return _jsx(Wrapper, { ...props, children: children });\n};\nconst Wrapper = styled('div') `\n  grid-area: ${({ area }) => area};\n  ${({ justifySelf }) => (justifySelf ? `justify-self: ${justifySelf}` : '')};\n`;\nexport default Panel;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\nimport Panel from './GridPanel.js';\nconst Grid = Object.assign((propsWithC) => {\n    const { children, ...props } = propsWithC;\n    return _jsx(Wrapper, { ...props, children: children });\n}, {\n    Panel,\n});\nGrid.Panel = Panel;\nconst interpolateLayout = ({ areas, rows, columns, gap, alignItems, }) => {\n    return `\n    grid-template-areas: ${areas.map((row) => `\"${row.join(' ')}\"`).join('\\n')};\n    grid-template-rows: ${rows.join(' ')};\n    grid-template-columns: ${columns.join(' ')};\n    gap: ${gap || '0px'};\n    ${alignItems ? `align-items: ${alignItems};` : ''}\n\n  `;\n};\nconst Wrapper = styled('div') `\n  display: grid;\n  ${interpolateLayout}\n  ${({ byWidth }) => {\n    const entries = byWidth\n        ? byWidth.map(({ minWidth, ...props }) => {\n            return `\n        @media (min-width: ${minWidth}px) {\n          ${interpolateLayout(props)}\n        }\n      `;\n        })\n        : [];\n    return entries.join('\\n');\n}}\n`;\nexport default Grid;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\nconst headingProps = `\n  font-size: 1em;\n  padding: 0;\n  margin: 0;\n`;\nexport const H1 = styled.h1 `\n  ${headingProps}\n`;\nexport const H2 = styled.h2 `\n  ${headingProps}\n`;\nexport const H3 = styled.h3 `\n  ${headingProps}\n`;\nexport const H4 = styled.h4 `\n  ${headingProps}\n`;\nexport const H5 = styled.h5 `\n  ${headingProps}\n`;\nexport const H6 = styled.h6 `\n  ${headingProps}\n`;\nconst Headings = [H1, H2, H3, H4, H5, H6];\nexport const HX = ({ children, headingLevel, ...props }) => {\n    const Heading = Headings[headingLevel - 1];\n    return _jsx(Heading, { ...props, children: children });\n};\n","import styled from 'styled-components';\n// TODO props per dom element as well as all for appbar\n// TODO abstract into small component for reusing?\nconst Wrapper = styled('div') `\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  box-sizing: border-box;\n  transition: box-shadow 1s cubic-bezier(0.8, 1, 0.2, 1) 3s;\n  ${({ shadow, width, color, theme }) => `\n    width: ${width || '100%'};\n    box-shadow: ${shadow || false\n    ? '0px 3px 5px -2px rgb(0 0 0 / 20%), 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);'\n    : 'none'};\n    background-color: ${color || theme?.primary || '#FFFE'};\n    color: ${theme?.accent || '#000'};\n  `}\n`;\nconst ToolBar = styled('ul') `\n  ${({ fixed, direction }) => `\n    position: ${fixed ? 'fixed' : 'relative'};\n    flex-direction: ${direction || 'row'};\n  `}\n  padding: 0px 25px;\n  margin: 0;\n  list-style-type: none;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  height: 100%;\n  min-height: 74px;\n  gap: 10px;\n  padding-left: 54px;\n`;\nconst Link = styled('a') `\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: inherit;\n  font-family: Roboto;\n  font-weight: 700;\n  padding: 0 15px;\n  font-size: 1em;\n  line-height: 74px;\n\n  ${({ active, theme }) => active\n    ? `\n      margin-top: 4px;\n      background: linear-gradient(360deg, #DFE667 -408.97%, rgba(223, 230, 103, 0) 78.21%);\n      border-bottom: 4px solid ${theme?.accent || '#000'}\n    `\n    : ``}\n`;\nconst Li = styled('li') `\n  display: block;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n  transition: all 0.5s;\n\n  &:hover {\n    background-color: rgba(40, 30, 30, 0.1);\n  }\n`;\nexport { Li, ToolBar, Wrapper, Link };\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Li, Link, ToolBar, Wrapper } from './common.js';\nconst Item = ({ children, ...props }) => (_jsx(Li, { children: _jsx(Link, { href: \"#\", ...props, children: children }) }));\n// TODO update to use grid comopnent\n// TODO move to separate components in case this could be reused\nconst AppBar = ({ children, ...props }) => (_jsx(Wrapper, { ...props, children: _jsx(ToolBar, { children: React.Children.map(children, (child) => {\n            if (child.props)\n                return React.cloneElement(child, props);\n        })?.filter(Boolean) }) }));\nAppBar.Item = Item;\nexport default AppBar;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { buildLexer, parseSearch } from './lexer.js';\nconst Search = ({ fields = {}, placeholder, color = 'black', background = 'transparent', debounce = 250, onSubmit, }) => {\n    const [search, setSearch] = useState([]);\n    const [hasSubmitted, setHasSubmitted] = useState(true);\n    const buttonRef = useRef(null);\n    const lexer = useMemo(() => buildLexer(fields), [fields]);\n    const handleSearchChange = useCallback((event) => {\n        const target = event.target;\n        const terms = parseSearch(lexer, target.value);\n        setSearch(terms);\n        setHasSubmitted(false);\n    }, [setSearch, setHasSubmitted, lexer]);\n    const handleSubmit = useCallback((event) => {\n        if (event !== null) {\n            event.preventDefault();\n            buttonRef.current?.blur();\n        }\n        if (!hasSubmitted) {\n            onSubmit(search);\n            setHasSubmitted(true);\n        }\n    }, [search, hasSubmitted, setHasSubmitted, onSubmit]);\n    useEffect(() => {\n        const timeoutHandler = setTimeout(() => {\n            handleSubmit(null);\n        }, debounce);\n        return () => clearTimeout(timeoutHandler);\n    }, [debounce, search, handleSubmit]);\n    return (_jsxs(SearchWrapper, { color: background, onSubmit: handleSubmit, children: [_jsx(SearchInput, { placeholder: placeholder, type: \"search\", name: \"search\", color: color, onChange: handleSearchChange }), _jsx(SearchIcon, { color: color, ref: buttonRef })] }));\n};\nconst SearchWrapper = styled.form `\n  display: flex;\n  width: 100%;\n  min-width: 250px;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid black;\n  border-radius: 10px;\n  margin: 1em;\n  background: ${({ color }) => color};\n  > * {\n    margin: 0.5em;\n    padding: 0.5em;\n  }\n`;\nconst SearchInput = styled.input `\n  flex-grow: 1;\n  flex-shrink: 1;\n  border: 0;\n  font: inherit;\n\n  :focus {\n    box-shadow: inset 0 0 0 1px ${({ color }) => color};\n    border-radius: 7px;\n    outline: 0;\n  }\n`;\nconst SearchIcon = styled.button `\n  position: relative;\n  font: inherit;\n  flex-grow: 0;\n  flex-shrink: 0;\n  width: 2em;\n  height: 2em;\n  background: transparent;\n  border: 0;\n\n  &, ::before, ::after {\n    box-sizing: border-box;\n  }\n\n  :focus {\n    ::before, ::after {\n      box-shadow: 0 0 5px 1px ${({ color }) => color};\n    }\n    outline: 0;\n  }\n\n  ::before, ::after {\n    content: '';\n    display: block;\n    position: absolute;\n  }\n\n  ::before {\n    left: 0;\n    top: 0;\n    width: 80%;\n    height: 80%;\n    border: calc(4em / 16) solid ${({ color }) => color};\n    border-radius: 50%;\n  }\n\n  ::after {\n    right: 0;\n    bottom: 0;\n    height: calc(4em / 16);\n    width calc(1.41 * 100% - 1.41 * 40% - 40%);\n    background: ${({ color }) => color};\n    transform: rotateZ(40deg);\n    transform-origin: bottom right\n  }\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport default Search;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useRef, useState, } from 'react';\nimport styled from 'styled-components';\nimport Grid from '../Grid/index.js';\nconst Drawer = ({ defaultIsOpen = false, title = '', width = '100%', color = 'black', background = 'transparent', children, }) => {\n    const [isOpen, setIsOpen] = useState(defaultIsOpen);\n    const contentRef = useRef(null);\n    const clickHandler = useCallback(() => {\n        setIsOpen(!isOpen);\n    }, [isOpen, setIsOpen]);\n    const contentHeight = contentRef.current?.clientHeight || 1000;\n    return (_jsxs(DrawerWrapper, { width: width, children: [_jsx(DrawerHeader, { title: title, color: color, background: background, isOpen: isOpen, onClick: clickHandler }), _jsx(DrawerContentOverflow, { isOpen: isOpen, maxHeight: contentHeight, children: _jsx(DrawerContentWrapper, { ref: contentRef, children: children }) })] }));\n};\nconst DrawerHeader = (props) => {\n    return (_jsx(DrawerHeaderWrapper, { ...props, children: _jsxs(Grid, { areas: [['icon', 'title', 'indicator']], rows: ['auto'], columns: ['auto', '1fr', 'auto'], gap: \"1em\", alignItems: \"center\", children: [_jsx(Grid.Panel, { area: \"icon\", children: _jsx(DrawerHeaderIcon, { color: props.color }) }), _jsx(Grid.Panel, { area: \"title\", justifySelf: 'left', children: _jsx(DrawerTitle, { color: props.color, children: props.title }) }), _jsx(Grid.Panel, { area: \"indicator\", children: _jsx(DrawerIndicatorIcon, { color: props.color, isOpen: props.isOpen, children: \"\\u25BC\" }) })] }) }));\n};\nconst DrawerWrapper = styled.div `\n  width: ${({ width }) => width};\n`;\nconst DrawerHeaderIcon = styled.div `\n  background: ${({ color }) => color};\n  height: calc(1em / 16);\n  width: 1em;\n  margin: 0 calc(1em * 0.35 / 2);\n\n  ::before {\n    content: '';\n    display: block;\n    background: ${({ color }) => color};\n    height: calc(1em / 16);\n    width: 1em;\n    transform: translateY(calc(-4 * 1em / 16)) scaleX(1.35);\n  }\n\n  ::after {\n    content: '';\n    display: block;\n    background: ${({ color }) => color};\n    height: calc(1em / 16);\n    width: 1em;\n    transform: translateY(calc(3 * 1em / 16)) scaleX(0.51);\n  }\n`;\nconst DrawerTitle = styled.div `\n  color: ${({ color }) => color};\n`;\nconst DrawerIndicatorIcon = styled('div') `\n  margin: 0 0.5em;\n  font-size: 0.5em;\n  color: ${({ color }) => color};\n  transition: transform 0.5s ease;\n  transform: scaleX(2) ${({ isOpen }) => (isOpen ? 'scaleY(-1)' : '')};\n`;\nconst DrawerHeaderWrapper = styled('button') `\n  width: 100%;\n  font: inherit;\n  background: ${({ background }) => background};\n  padding: 8px 16px;\n  border: 0;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\n// Overflow wrapper to ensure that when we hide the content the translated element\n// doesn't overflow and instead hides the content\nconst DrawerContentOverflow = styled.div `\n  overflow-y: hidden;\n  width: 100%;\n  transition: max-height 0.5s ease;\n  ${({ isOpen, maxHeight }) => isOpen\n    ? `\n    max-height: ${maxHeight}px;\n    animation: 1s fadeIn;\n    animation-fill-mode: forwards;\n  `\n    : `\n    max-height: 0px;\n  `}\n\n  @keyframes fadeIn {\n    99% {\n      overflow: hidden;\n    }\n    100% {\n      overflow: visible;\n    }\n  }\n`;\nconst DrawerContentWrapper = styled.div `\n  position: relative;\n  width: 100%;\n`;\nexport default Drawer;\n","import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from 'react';\nimport Select, { components } from 'react-select';\nimport styled from 'styled-components';\nimport { HX } from '../Heading/index.js';\nconst { Placeholder } = components;\nconst Value = styled('div') `\n  padding: 4px;\n  margin: 4px;\n  margin-left: 0;\n  font-size: 1rem;\n  color: ${(props) => props.textColor || '#FFFFFF'};\n  background-color: ${(props) => props.color || '#99A0A3'};\n  user-select: none;\n`;\nconst Wrapper = styled('div') `\n  min-height: 95px;\n  min-width: 275px;\n  ${({ width }) => `\n    width: ${width || '100%'}\n  `}\n`;\nconst ValuesContainer = styled('div') `\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n`;\nconst Close = styled('button') `\n  all: unset;\n  margin-left: 20px;\n  color: ${({ color }) => color || '#FFFFFF'};\n  transition: fill 0.5s ease-in-out;\n  cursor: pointer;\n  &:hover {\n    color: #bb392d;\n  }\n  &:focus {\n    color: #c82f21;\n  }\n`;\nconst Title = styled(HX) `\n  margin: 0;\n  padding: 0;\n  margin-bottom: 5px;\n`;\nconst HiiMultiSelect = ({ onChange, value = [], ...props }) => {\n    const HiiLabel = (labelProps) => {\n        return (_jsxs(_Fragment, { children: [_jsx(Placeholder, { ...labelProps, isFocused: labelProps.isFocused, children: labelProps.selectProps.placeholder }), React.Children.map(labelProps.children, (child) => child && child.type !== Placeholder ? child : null)] }));\n    };\n    const styles = {\n        multiValue: (provided) => ({\n            ...provided,\n            display: 'none',\n        }),\n        option: (provided) => ({\n            ...provided,\n            ':hover': {\n                ...provided[':hover'],\n                backgroundColor: '#B6EFA0',\n                color: '#27847A',\n            },\n        }),\n        placeholder: (provided) => ({\n            ...provided,\n            position: 'absolute',\n            padding: '8px 4px',\n        }),\n        menuList: (provided) => ({\n            ...provided,\n            zIndex: 999,\n            color: '#fff',\n            backgroundColor: '#27847A',\n        }),\n    };\n    const handleRemoveValue = (e) => {\n        if (!onChange)\n            return null;\n        const { name } = e.currentTarget;\n        const removedValue = value.find((val) => val.value === name);\n        if (!removedValue)\n            return null;\n        onChange(value.filter((val) => val.value !== name)\n        // TODO, something to review later in case we want to log events\n        // we could pass a second arg as exmpl: { name, action: 'remove-value', removedValue }\n        );\n    };\n    return (_jsxs(_Fragment, { children: [_jsx(Select, { styles: styles, theme: (provided) => ({\n                    ...provided,\n                    borderRadius: 0,\n                }), components: {\n                    ValueContainer: HiiLabel,\n                }, ...props, closeMenuOnSelect: true, controlShouldRenderValue: true, onChange: onChange, isSearchable: false }), _jsx(ValuesContainer, { children: value.map((val) => (_createElement(Value, { ...val, key: val.value },\n                    _jsx(\"span\", { children: val.label }),\n                    _jsx(Close, { color: val.textColor, name: val.value, onClick: handleRemoveValue, children: \"x\" })))) })] }));\n};\nconst Dropdown = ({ variant = null, options, isMulti = false, ...props }) => {\n    const [value, setValue] = React.useState(props.selected);\n    const update = (val) => props.update(val);\n    const onChange = (val) => {\n        update(val);\n        setValue(val);\n    };\n    return (_jsxs(Wrapper, { children: [props.label && _jsx(Title, { headingLevel: 4, children: props.label }), variant === 'hii' ? (_jsx(HiiMultiSelect, { isMulti: true, options: options, variant: 'hii', value: value, onChange: onChange, ...props })) : (_jsx(Select, { value: value, options: options, isMulti: isMulti, onChange: onChange, closeMenuOnSelect: true, ...props }))] }));\n};\nexport default Dropdown;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useId } from 'react-id-generator';\nconst ListCard = React.forwardRef(({ flashColor = '#e0e0e0', background = '#f0f0f0', title, subtitle = '', orientation = 'left', width = '100%', height = '100%', onClick, }, listCardRef) => {\n    const [id] = useId();\n    return (_jsxs(Wrapper, { ref: listCardRef, orientation: orientation, flashColor: flashColor, background: background, width: width, height: height, id: id, onClick: () => onClick(title), children: [_jsx(\"label\", { htmlFor: id, children: title }), subtitle && _jsx(\"span\", { children: subtitle })] }));\n});\nconst Wrapper = styled.button `\n  border: 0;\n  font: inherit;\n  text-align: ${({ orientation }) => orientation};\n  cursor: pointer;\n\n  position: relative;\n  width: ${({ width }) => width};\n  height: ${({ height }) => height};\n  padding-left: calc(1em * 41 / (16 * 1.2));\n  overflow: hidden;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 0.5em;\n\n  background: ${({ background }) => background};\n\n  border-top-left-radius: ${({ orientation }) => orientation === 'left' ? '0.75em' : '0'};\n  border-top-right-radius: ${({ orientation }) => orientation === 'right' ? '0.75em' : '0'};\n  border-bottom-right-radius: ${({ orientation }) => orientation === 'right' ? '0.75em' : '0'};\n  border-bottom-left-radius: ${({ orientation }) => orientation === 'left' ? '0.75em' : '0'};\n\n  > * {\n    display: block;\n    padding: 0;\n    margin: 0;\n    width: 90%;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    cursor: pointer;\n  }\n\n  > label {\n    font-size: 1.2em;\n    font-weight: bolder;\n  }\n\n  > span {\n    font-size: 1em;\n  }\n\n  ::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: ${({ orientation }) => (orientation === 'right' ? 'unset' : '0')};\n    right: ${({ orientation }) => (orientation === 'left' ? 'unset' : '0')};\n\n    width: 1em;\n    background: ${({ flashColor }) => flashColor};\n  }\n\n  :focus-visible {\n    outline: 1px ${({ flashColor }) => flashColor} solid;\n  }\n`;\nexport default ListCard;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\nconst getTailPosition = (position) => {\n    switch (position) {\n        case 'bottomRight':\n            return 'right';\n        case 'bottomLeft':\n            return 'left';\n        default:\n            return 'right';\n    }\n};\nconst HelpContainer = ({ children, background = '#f0f0f0', padding = '1em', margin = '0', width = 'auto', height = 'auto', borderRadius = '1em', tailPosition = 'bottomRight', }) => {\n    return (_jsx(Wrapper, { background: background, padding: padding, margin: margin, width: width, height: height, borderRadius: borderRadius, tailPosition: tailPosition, children: children }));\n};\nconst Wrapper = styled.div `\n  background: ${({ background }) => background};\n  padding: ${({ padding }) => padding};\n  width: ${({ width }) => width};\n  height: ${({ height }) => height};\n  margin: ${({ margin }) => margin};\n  border-radius: ${({ borderRadius }) => borderRadius};\n  box-shadow: 0px 4px 5px rgba(0, 0, 0, 0.1);\n  position: relative;\n  box-sizing: border-box;\n\n  ::before {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 0;\n    bottom: -0.7em;\n    border: 0.8em solid ${({ background }) => background};\n    rotate: 45deg;\n    border-bottom-right-radius: 0.8em;\n    box-shadow: 4px 4px 5px rgba(0, 0, 0, 0.1);\n    ${({ tailPosition }) => getTailPosition(tailPosition)}: 2em;\n  }\n`;\nexport default HelpContainer;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from 'styled-components';\nconst ToggleButton = ({ width = 'auto', height = 'auto', borderRadius = '', isOpen = false, openBackground = 'lightgray', closeBackground = '#FFF', openContent = 'X', closeContent = '?', fontColor = 'black', fontWeight = 'inherit', onClick, }) => {\n    return (_jsx(Wrapper, { width: width, height: height, borderRadius: borderRadius, isOpen: isOpen, openBackground: openBackground, closeBackground: closeBackground, openContent: openContent, closeContent: closeContent, fontColor: fontColor, fontWeight: fontWeight, onClick: onClick, children: isOpen ? openContent : closeContent }));\n};\nconst Wrapper = styled.button `\n  width: ${({ width }) => width};\n  height: ${({ height }) => height};\n  border: 0;\n  cursor: pointer;\n  color: ${({ fontColor }) => fontColor};\n  font-weight: ${({ fontWeight }) => fontWeight};\n\n  background: ${({ isOpen, openBackground, closeBackground }) => isOpen ? openBackground : closeBackground};\n  border-radius: ${({ borderRadius }) => borderRadius};\n`;\nexport default ToggleButton;\n"],"names":[],"sourceRoot":""}